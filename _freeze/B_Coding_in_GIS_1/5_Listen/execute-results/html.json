{
  "hash": "9e5be49e0494662d52edd168dafc0b3d",
  "result": {
    "markdown": "# Aufgabe 2: Listen\n\n## Theorie\n\nWohl das einfachste Gefäss, um mehrere Werte zu speichern sind Python-Listen, sogenannte *Lists*. Diese *Lists* werden mit eckigen Klammern erstellt. Die Reihenfolge, in denen die Werte angegeben werden, wird gespeichert. Das erlaubt es uns, bestimmte Werte aufgrund ihrer Position abzurufen. \n\nEine *List* wird folgendermassen erstellt:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nhexerei = [3,1,2]\n```\n:::\n\n\nDer erste Wert wird in Python mit `0` (!!!) aufgerufen:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nhexerei[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntype(hexerei)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nlist\n```\n:::\n:::\n\n\nIm Prinzip sind *Lists* ähnlich wie *Vectors* in R, mit dem Unterschied das in Python-Lists unterschiedliche Datentypen abgespeichert werden können. Zum Beispiel auch weitere, verschachtelte Lists:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nchaos = [23, \"ja\", [1,2,3]]\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Der Inhalt vom ersten Wert ist vom Typ \"Int\"\ntype(chaos[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nint\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Der Inhalt vom dritten Wert ist vom Typ \"List\"\n\ntype(chaos[2])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nlist\n```\n:::\n:::\n\n\n## Übungen\n\n<!-- % : Lists -->\n### Übung 2.1\n\n1. Erstelle eine Variable `vornamen` bestehend aus einer *List* mit 3 Vornamen\n2. Erstelle eine zweite Variable `nachnamen` bestehend aus einer *List* mit 3 Nachnamen\n3. Erstelle eine Variable `groessen` bestehend aus einer *List* mit 3 Grössenangaben in Zentimeter.\n\n\n\n<!-- % : Elemente aus Liste ansprechen -->\n### Übung 2.2\n\nWie erhältst du den ersten Eintrag in der Variable `vornamen`? \n\n::: {.cell tags='[\"hide-cell\"]' execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Christopher'\n```\n:::\n:::\n\n\n<!-- % : Liste ergänzen -->\n### Übung 2.3\n\nListen können durch die Methode `append` ergänzt werden (s.u.). Ergänze die Listen `vornamen`, `nachnamen` und `groessen` durch je einen Eintrag.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nvornamen.append(\"Malte\")\n```\n:::\n\n\n\n\n<!-- % : Summen berechnen -->\n### Übung 2.4\n\nErmittle die Summe aller Werte in `groessen`. Tip: Nutze dazu `sum()`\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n695\n```\n:::\n:::\n\n\n<!-- % : Anzahl Werte ermitteln -->\n### Übung 2.5\n\nErmittle die Anzahl Werte in `groessen` . Tip: Nutze dazu `len()`\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n4\n```\n:::\n:::\n\n\n### Uebung 2.6 {#sec-mittelwert}\n\nBerechne die durchschnittliche Grösse aller Personen in `groessen`. Tip: Nutze dazu `len()` und `sum()`.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n173.75\n```\n:::\n:::\n\n\n<!-- % : Minimum-/Maximumwerte -->\n### Übung 2.7\n\nErmittle nun noch die Minimum- und Maximumwerte aus `groessen` (finde die dazugehörige Funktion selber heraus).\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n182\n```\n:::\n:::\n\n\n",
    "supporting": [
      "5_Listen_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
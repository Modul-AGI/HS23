{
  "hash": "6a4792c940163722a7c859ff21b41930",
  "result": {
    "markdown": "# Aufgabe 9: Funktionen in *DataFrames* {#sec-offset-dataframe}\n\n## Theorie\n\nIn dieser Aufgabe haben wir das Ziel, die in der letzten Aufgabe (@sec-random-numbers) erstellte Funktion `offset_coordinate()` auf alle Zeckenstich-Koordinaten anwenden. Bildlich gesprochen: Wir nehmen unsere Zeckenstichdatensatz und schütteln ihn **einmal** durch. So erhalten wir einen Datensatz ähnlich wie in @fig-arcgiszecken mit dem Unterschied, dass jede Zeckenstichmeldung nicht eine *Wolke* von simulierten Punkten enthält, sondern nur einen einzelnen Punkt.\n\nNutze hier die Datei \"zeckenstiche.csv\" von letzter Woche (siehe @tbl-datensaetze). Erstelle ein neues Notebook und nutze nachstehenden Code um die nötigen Module und Functions zu haben:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndef offset_coordinate(old, distance = 100):\n    import random\n    new = old + random.normalvariate(0,distance)\n\n    return new\n\nzeckenstiche = pd.read_csv(\"data/zeckenstiche.csv\")\n\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Übungen\n\n<!-- % : Spalten selektieren -->\n### Übung 9.1\n\nMache dich nochmals damit vertraut, einzelne Spalten zu selektieren. Schau dir @sec-dataframes nochmals an wenn du nicht mehr weisst wie das geht.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0    1250648\n1    1250672\n2    1250683\n3    1250683\n4    1250692\n5    1250711\n6    1250712\n7    1250720\n8    1250725\n9    1250725\nName: y, dtype: int64\n```\n:::\n:::\n\n\n<!-- % Neue Spalten erstellen -->\n### Übung 9.2\n\nMache dich nochmals damit vertraut, wie man neue Spalten erstellt. Schau dir @sec-dataframes nochmals an wenn du nicht mehr weisst wie das geht. Erstelle ein paar neue Spalten nach dem Beispiel unten um die Hangriffe zu üben. Lösche die Spalten im Anschluss wieder mit `del zeckenstiche['test1'] etc.\n\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n      <th>test1</th>\n      <th>test2</th>\n      <th>test3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n\n<!-- % : `apply` -->\n### Übung 9.3 {#sec-ex-apply}\n\n`pandas` kennt eine ganze Familie von Methoden, um Spalten zu Manipulieren und Daten zu Aggregieren (`apply`, `map`, `mapapply`, `assign`). Es würde den Rahmen dieses Kurses sprengen, die alle im Detail durchzugehen, es lohnt sich aber sehr sich mit diesen auseinanderzusetzen wenn man sich näher mit Python befassen möchte.\n\nIm unserem Fall brauchen wir lediglich die Methode `apply` um die Funktion `offset_coordinate()` auf die Zeckenstichkoordinaten anzuwenden. Dabei gehen wir wie folgt for:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nzeckenstiche[\"x\"].apply(offset_coordinate)\n#\\______1_______/ \\_2_/\\_______3_________/\n\n# 1. Spalte selektieren ([\"x\"])\n# 2. Methode \"apply\" aufrufen\n# 3. Function übergeben\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0    2.681136e+06\n1    2.681098e+06\n2    2.681058e+06\n3    2.681117e+06\n4    2.680969e+06\n5    2.681460e+06\n6    2.681244e+06\n7    2.680990e+06\n8    2.681117e+06\n9    2.681028e+06\nName: x, dtype: float64\n```\n:::\n:::\n\n\nVerwende dieses Schema um auch `offset_coordinate` auf die `y` Spalte anzuwenden und speichere den Output dieser beiden Operationen als neue Spalten `x_sim` sowie `y_sim`. Die *DataFrame* `zeckenstiche` sollte danach wie folgt aussehen:\n\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n      <th>x_sim</th>\n      <th>y_sim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n      <td>2.681078e+06</td>\n      <td>1.250802e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n      <td>2.681008e+06</td>\n      <td>1.250601e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n      <td>2.681156e+06</td>\n      <td>1.250574e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n      <td>2.681158e+06</td>\n      <td>1.250852e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n      <td>2.681030e+06</td>\n      <td>1.250498e+06</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n      <td>2.681261e+06</td>\n      <td>1.250636e+06</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n      <td>2.681121e+06</td>\n      <td>1.250797e+06</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n      <td>2.681102e+06</td>\n      <td>1.250799e+06</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n      <td>2.680966e+06</td>\n      <td>1.250712e+06</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n      <td>2.681036e+06</td>\n      <td>1.250711e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!-- % : Zusätzliche Parameter -->\n### Übung 9.4 {#sec-ex-param}\n\nIn @sec-ex-apply haben wir unsere Funktion `offset_coordinate` aufgerufen, ohne den Parameter `distance` zu spezifizieren. Dies war möglich, weil wir für `distance einen Defaultwert festgelegt hat (100 Meter). Wir können aber auch zusätzliche Parameter kommagetrennt nach der Funktion angeben. Dies sieht folgendermassen aus:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nzeckenstiche[\"x\"].apply(offset_coordinate, distance = 200)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0    2.680864e+06\n1    2.680793e+06\n2    2.680729e+06\n3    2.681212e+06\n4    2.680705e+06\n5    2.681372e+06\n6    2.680746e+06\n7    2.680661e+06\n8    2.681139e+06\n9    2.681093e+06\nName: x, dtype: float64\n```\n:::\n:::\n\n\nNutze diese Möglichkeit, um den Offset (`distance`) auf maximal 10 Meter zu reduzieren.\n\n\n\n<!-- % : Simulation visualisieren -->\n### Übung 9.5\n\nUm die Original `x`/`y`-Werte sowie die simulierten Daten im gleichen Plot darzustellen, wird folgendermassen vorgegangen: Der erste Datensatz wird mit `.plot()` visualisiert, wobei der Output einer Variabel  (z.B. `basemap`)  zugewiesen wird. Danach wird der zweite Datensatz ebenfalls mit `.plot()` visualisiert, wobei auf den ersten Plot via dem Argument `ax` verwiesen wird.\n\nBei den roten Punkten handelt es sich um die Original-Zeckenstichen, bei den blauen um die simulierten (leicht verschoben) Zeckenstiche. Visualisiere deine eigenen Zeckenstiche auf diese Weise.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\n\nbasemap = zeckenstiche.plot(\"x\", \"y\", kind = \"scatter\", color = \"red\")\nzeckenstiche.plot(\"x_sim\", \"y_sim\", kind = \"scatter\", ax = basemap, color = \"blue\")\n\nplt.axis(\"equal\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(2681060.2931099026, 2681176.2717566714, 1250644.15, 1250728.85)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](9_Funktionen_in_DataFrames_files/figure-html/cell-12-output-2.png){width=593 height=436}\n:::\n:::\n\n\n<!-- % Genauigkeitsangaben der Punkte mitberücksichtigen. -->\n\n\n<!--\n### Übung 9.6\n\nIn @sec-ex-param haben wir alle Punkte um etwa die gleiche Distanz (+/- 10m) verschoben. Wenn wir unser *DataFrame* \"zeckensiche\" genau anschauen, steht uns eine Genauigkeitsangabe pro Punkt zur Verfügung: Die Spalte `accuracy. Diese Spalte ist eine Genauigkeitsangabe über den gemeldeten Zeckenstich. Sie sagt etwas darüber aus, wie sicher der/die Nutzer\\*in bei der Standortsangabe war (z.B. \"*Diese Meldung ist etwa auf 300 Meter genau*\"). Wir können diese Genauigkeitsangabe auch nutzen um den offset *pro Punkt* zu bestimmen.\n\nNutze die Spalte `accuracy` als Argument des Parameters `distance` in der Funktion `offset_coordinate` um genau dies zu erreichen. Visualisiere nun die Daten. Was ist hier passiert?\n\n\n-->\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nzeckenstiche\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n#| tags: [hide-cell]\n#| echo: false\n# Musterlösung\n\nzeckenstiche[\"x_sim\"] = zeckenstiche[\"x\"].apply(offset_coordinate, distance = zeckenstiche[\"accuracy\"])\nzeckenstiche[\"y_sim\"] = zeckenstiche[\"y\"].apply(offset_coordinate, distance = zeckenstiche[\"accuracy\"])\n\nzeckenstiche\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#| tags: [hide-cell]\n#| echo: false\n# Musterlösung\nbasemap = zeckenstiche.plot(\"x\", \"y\", kind = \"scatter\", color = \"red\")\nzeckenstiche.plot(\"x_sim\", \"y_sim\", kind = \"scatter\", ax = basemap, color = \"blue\")\n\nplt.axis(\"equal\")\n\nplt.show()\n\n# Was ist hier passiert? \n# Offensichtlich sind die Zeckenstiche nur wenige Meter voneinander entfernt.\n# Der offset von mehreren 100 Meter ist viel weiter, als diese Distanz.\n```\n:::\n\n\n",
    "supporting": [
      "9_Funktionen_in_DataFrames_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
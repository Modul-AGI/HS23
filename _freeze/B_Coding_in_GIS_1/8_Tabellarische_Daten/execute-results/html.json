{
  "hash": "8a59b2d4158eeaf6bdb630a4d5bad858",
  "result": {
    "markdown": "# Aufgabe 4: Tabellarische Daten {#sec-dataframes}\n\n## Theorie\n\nSchauen wir uns nochmals die *Dictionary* `people` aus der letzten Übung an. Diese ist ein Spezialfall einer Dictionary: Jeder Eintrag besteht aus einer Liste von gleich vielen Werten. Wie bereits erwähnt, kann es in einem solchen Fall sinnvoll sein, die Dictionary als Tabelle darzustellen.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\npeople = {\"vornamen\": [\"Christopher\", \"Henning\", \"Severin\"], \"nachnamen\": [\"Annen\",\"May\", \"Kantereit\"], \"groessen\": [174, 182, 162]}\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd # Was diese Zeile beudeutet lernen wir später\n\npeople_df = pd.DataFrame(people)\n\npeople_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vornamen</th>\n      <th>nachnamen</th>\n      <th>groessen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Christopher</td>\n      <td>Annen</td>\n      <td>174</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Henning</td>\n      <td>May</td>\n      <td>182</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Severin</td>\n      <td>Kantereit</td>\n      <td>162</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Übungen\n\n<!-- % : von einer *Dictionary* zu einer *DataFrame* -->\n### Übung 4.1\n\nImportiere `pandas` und nutze die Funktion `DataFrame` um `people` in eine DataFrame umzuwandeln (siehe dazu das Beispiel oben). Weise den Output der Variable `people_df` zu und schau dir `people_df` an.\n\n\n\n### Übung 4.2 {#sec-ex-to-csv}\n\nIn der Praxis kommen Tabellarische Daten meist als \"csv\" Dateien daher. Wir können aus unserer eben erstellten DataFrame sehr einfach eine csv Datei erstellen. Führe das mit folgendem Code aus und suche anschliessend die erstellte csv-Datei.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npeople_df.to_csv(\"people.csv\")\n```\n:::\n\n\n:::{.callout-note}\n## Achtung!\n\nFalls ihr nicht wisst, wo das csv abgespeichet ist solltet ihr das Kapitel @sec-jupyternotebook nochmals durchlesen. \n\nDie *Working Directory* zu kennen ist wichtig, besonders auch für die nächste Aufgabe. Falls ihr die aktuelle Working Directory neu setzen und dafür Jupyter Notebook schliessen müsst, denkt daran die Notebook vorgängig zu speichern und im File Explorer aufzusuchen.\n:::\n\n<!-- % : CSV als *DataFrame* importieren -->\n### Übung 4.3 {#sec-ex-import-zeckenstiche}\n\nGenau so einfach ist es eine csv zu importieren. Lade die Datei \"zeckenstiche.csv\" (siehe @tbl-datensaetze) herunter und speichere es im aktuellen Arbeitsverzeichnis ab. Importiere mit folgendem Code die Datei \"zeckenstiche.csv\".\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# ich habe die Daten in einem Unterordner \"data\" abgespeichert\nzeckenstiche = pd.read_csv(\"data/zeckenstiche.csv\")\n```\n:::\n\n\n<!-- % : Koordinaten räumlich darstellen -->\n### Übung 4.4 {#sec-ex-scatterplot}\n\nDie *DataFrame* `zeckenstiche` beinhaltet x und y Koordinaten für jeden Unfall in den gleichnamigen Spalten. Wir können die Stiche mit einem Scatterplot räumlich visualisieren. Führe dazu folgenden Code aus. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig = zeckenstiche.plot.scatter(\"x\",\"y\")\n\nfig.axis(\"equal\")\n# \"equal\" stellt sicher, das die x und y Achsen gleich skaliert sind\n# dies ist sinnvoll, da es sich ja um Schweizer Koordinaten (Meter) handelt\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(2681088.05, 2681174.95, 1250644.15, 1250728.85)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](8_Tabellarische_Daten_files/figure-html/cell-7-output-2.png){width=593 height=436}\n:::\n:::\n\n\n<!-- % : Einzelne Spalte selektieren -->\n### Übung 4.5 {#sec-ex-sel-col}\n\nUm eine einzelne Spalte zu selektieren (z.B. die Spalte \"ID\"), kann man gleich vorgehen wie bei der Selektion eines Eintrags in einer *Dictionary*. Probiere es aus.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0     2550\n1    10437\n2     9174\n3     8773\n4     2764\n5     2513\n6     9185\n7    28521\n8    26745\n9    27391\nName: ID, dtype: int64\n```\n:::\n:::\n\n\n<!-- % : Neue Spalte erstellen -->\n### Übung 4.6 {#sec-ex-new-col}\n\nAuch das Erstellen einer neuen Spalte ist identisch mit der Erstellung eines neuen *Dictionary* Eintrags. Erstelle eine neue Spalte \"Stichtyp\" mit dem Wert \"Zecke\" auf jeder Zeile (s.u.).\n\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n      <th>Stichtyp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n      <td>Zecke</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n      <td>Zecke</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "8_Tabellarische_Daten_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
{
  "hash": "b8a62cf673ea16901defe8209e5167db",
  "result": {
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: false                 # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n# Übung Zeckenstiche\n\nIn dieser Übung wollen wir unseren Leistungsnachweis aus Programmieren erweitern. Dabei soll eine Karte mit verschiedenen Layern erstellt werden.\nZudem werdet ihr weitere Tools und Tipps erhalten, wie ihr euer Jupyter Notebook aufwerten und zum Schluss Online über GitHub publizieren könnt.\n\n## Übung 1: Vorbereitung\n\nBitte ladet zuerst die Musterlösung [hier]() runter.\n\nWir werden in dieser Übung mit der Library [Folium](https://python-visualization.github.io/folium/version-v0.14.0/index.html) arbeiten. Wenn ihr lokal auf eurem Rechner arbeitet, müsst ihr dieses Package zuerst noch über conda installieren (siehe: @sec-conda).\n\n## Übung 2: Base Map\nZuerst müssen wir eine Basiskarte erstellen, zu welcher wir dann die weiteren Layer hinzufügen können. Dazu nutzen wir nun Folium.\nAls Mittelpunkt der Karte wählen wir die Koordinaten der Stadt Zürich (Zurich latitude: 47.36667, longitude: 8.55) aus.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"false\"}\n# Zurich latitude longitude: 47.36667, 8.55\nmap = folium.Map(location=[47.36667, 8.55], zoom_start = 13, tiles = \"cartodbpositron\")\n```\n:::\n\n\nIhr könnt mit den Tiles und dem Zoom Level experimentieren. Information zu den Tiles findet ihr [hier](https://python-visualization.github.io/folium/latest/user_guide/raster_layers/tiles.html).\n\n## Übung 3: Wald Layer hinzufügen\n\nNun wollen wir die Waldflächen als unseren ersten Layer hinzufügen. Ihr habt die .explore() Funktion bereits kennengelernt. Sie verfügt aber über diverse interessante Attribute, welche wir nun benutzen wollen.\n\nDa unser Wald Datensatz aus zwei Zeilen mit Wald und nicht Wald besteht, müssen wir die Waldflächen zuerst noch rausfiltern. \n\nFolium kann nur das weltweite CRS WGS84 (EPSG:4326) verarbeiten und weil der Geodataframe Wald das Schweizer CRS CH1903+ / LV95 (EPSG:2056) verwendet, müssen wir dieses mittels `to_crs()` transformieren, bevor wir ihn visualisieren können.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\n# Wald zur Karte hinzufügen\nis_wald = wald[wald[\"Wald_text\"] == \"ja\"] # Selektieren nur den Wald\nis_wald.to_crs(4326).explore(\n    m = map,           # Fügt diesen Layer der Map map hinzu\n    color = \"green\",   # Der Layer wird grün dargestellt\n    tooltip = False,   # Es werden keine Daten angezeigt, wenn man über ein Objekt hovered.\n    highlight = False, # Das Objekt wird nicht hervorgehoben, wenn man darüber hovered.\n    name = \"Wald\"      # Der Name des Layers\n)\n```\n:::\n\n\nWenn wir nun map aufrufen, wird die Basemap zusammen mit dem Wald Layer dargestellt.\n\n## Übung 4: Original und simulierter Zeckenstich Layer hinzufügen\n\nNun wollen wir neben dem Wald Layer (Polygon) den originalen Zeckenstiche Layer (Punkte) hinzufügen. Kopiere dazu den unteren Code. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"false\"}\n# Original Zeckenstiche zur Karte hinzufügen\nzeckenstiche_original_gpd.to_crs(4326).explore(\n    m = map,                                     \n    color = \"red\",                              \n    marker_kwds = dict(radius = 1, fill = True), # Optionen für das Aussehen der Punkte\n    tooltip = \"ID\",                              # Beim Hovern über das Objekt wird die ID dargestellt\n    name = \"Original Zeckenstiche\"               # Der Name des Layers\n)\n```\n:::\n\n\nNun wollen wir die simulierten Zeckenstiche darstellen. Als Vorlage könnt ihr den Code von oben kopieren. Erweitere die Funktion `explore` um folgende Logik:\n\n- Gerne würden wir die Spalte \"Radius\" mit der Farbvariation viridis visualisieren. Nutze hierfür die Attribute `column` und `cmap`.\n- Zudem soll die Legende des Layers dargestellt werden. Zudem wollen wir keine Colorbar als Legende haben. Nutze dafür die Optionen der Legende `legend_kwds = dict(colorbar = False)`. \n- In den Tooltips sollen neben der ID noch der Radius und der Run dargestellt werden. \n- Nenne den Layer \"Simulation Zeckenstiche\".\n\nWeitere Informationen zur `explore` Funktion findet ihr [hier](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.explore.html).\n\n\n\n## Übung 5: Layer Control hinzufügen\n\nZum Abschluss wollen wir noch ein `Layer Control` hinzufügen, damit wir die verschiedenen Layer ein- und ausblenden können.\nSchaut dafür im [User Guide von Folium](https://python-visualization.github.io/folium/latest/user_guide.html) und sucht nach den Layer Control und versucht diesen eurer `map` hinzuzufügen.\n\n\n\nNun ist unsere Map fertig. Inspiziert diese und spielt mit den `Radien` und `Runs` herum und versucht auch die Grössen und Farben der Points anzupassen, bis Ihr mit dem Resultat zufrieden seid.\n\n## (Optional) Übung 6: Notebook verschönern\n\n### Input\n\n#### Tags\n\nTags können dazu benutzt werden, um das Verhalten der Cell zu verändern. Es gibt dafür folgende Möglichkeiten:\n\n- `hide-input`: Verstecke die Cell (sie kann aber noch aufgeklappt werden)\n- `hide-output`: Verstecke den Output der Cell\n- `hide-cell`: Verstecke sowohl den Input als auch den Output der Zelle\n- `remove-input`: Entferne die Cell komplett\n- `remove-output`: Entferne den Output der Cell\n- `remove-cell`: Entferne den Cell Input und Output komplett\n\n#### UI Elements\n\nIhr könnt auch verschiedene Elemente in Grids einteilen. Dies funktioniert folgendermassen:\n\n```{.default}\n::::{grid}\n\n:::{grid-item}\n:outline:\n:columns: 3\nHier kommt ein Text / Bild / Karte\n:::\n\n:::{grid-item}\n:outline:\n:columns: 9\nHier kommt ein weiteres Text / Bild / Karte\n:::\n\n::::\n```\n\nWeitere Möglichkeiten findet ihr [hier](https://jupyterbook.org/en/stable/content/components.html)\n\n#### Tabellen\n\nEine Tabelle muss nach folgender Markdown Syntax erstellt werden:\n\n```{.default}\n|Name |Gender|Age  |Origin | \n|-----|:-----|:---:|:-----:|\n|Jack |Male  |23   |USA    |\n|Susan|Female|22   |Canada |\n```\n\n- Die erste Zeile ist die Tabellenüberschrift\n- Die zweite Zeile beinhaltet Bindestriche \"-\" und optionalen Doppelpunkten \":\", um den Text in den Spalten auszurichten.\n    - `:---` für die linke Ausrichtung\n    - `:---:` für die mittlere Ausrichtung\n    - `---:` für die rechte Ausrichtung\n- Die weiteren Zeilen beinhalten der Tabelleninhalt. \n\n#### Bilder\n\nEin Bild kann ebenfalls via Markdown Syntax hinzugefügt werden:\n\n```{.default}\n![Abbildungstext](../images/test.png)\n```\n\n### Aufgabe \n\n- Fügt nun ein Bild einer Zecke in eure Einführungstext ein. Benutzt dazu ein Grid, womit ihr auf einer Seite eueren Text habt und auf der anderen Seite euer Bild. Als Abbildungstext könnt ihr die die Quelle des Bilds angeben.\n\n- Fügt nun eine Tabelle im Abschnitt Methodik hinzu, welche die verwendeten Daten (`zeckenstiche_full` und `wald`) beschreibt (Name, Datentyp, Herkunft, Koordinatensystem, Beschreibung).\n\n- Fügt einige Tags in Cells ein, wo ihr den Input, Output oder beides nicht sehen wollt.\n\n## Übung 7: Notebook in HTML konvertieren\n\nDamit wir nun unser Jupyter Notebook publizieren können, müssen wir davon ein HTML Output generieren.\n\nTODO: HOW TO \n\nNenne das File `index.html`, damit GitHub Pages das File automatisch als Startseite erkennt.\n\n## Übung 8: GitHub und Publizieren\n\n:::{.callout-note}\nGitHub ist eine webbasierte Plattform, die Hosting für Git-Repositories bereitstellt. Es bietet Tools für die Zusammenarbeit, Codeüberprüfung und Projektverwaltung. GitHub wird von Entwicklern weit verbreitet genutzt, um Open-Source-Projekte zu teilen, dazu beizutragen und zusammenzuarbeiten. Es bietet auch Funktionen wie die Verfolgung von Problemen (Issues) und Pull-Anfragen (Pull Requests).\n:::\n\n1. Registriert euch mit eurer privaten Email Adresse auf [GitHub](https://github.com/).\n\n2. Nun da ihr auf eingeloggt seid, könnt ihr euer Repository erstellen. Drücke hierfür oben rechts auf den Avatar und wähle dann \"Your repositories\". Klicke anschliessend auf das grüne Symbol \"New\". Im neuen Fenster kannst du nun einen Namen für dein Repository definieren. Zudem kannst du die Sichtbarkeit des Repository anpassen, aber wir belassen es bei Public, damit wir dann auch das HTML File publizieren können. Schliesse die Ganze mit \"Create repository\" ab.\n\n    ![Repository erstellen Schritt 1](figures/github_1.PNG)\n\n    ![Repository erstellen Schritt 2](figures/github_2.PNG)\n\n3. Nun hast du ein leeres Repository. Es gibt verschiedene Möglichkeiten nun Daten in dieses Repository zu kriegen. Am einfachsten ist aber das direkte Hochladen von Files. Klicke hierfür auf \"uploading an existing file\" und ziehe anschliessend das Jupyter Notebook und dein daraus generiertes HTML File (`index.html`) in die. Gib eine kurze Commit Beschreibung und klicke auf \"Commit changes\". \n\n    ![](figures/github_3.PNG)\n\n    ![](figures/github_4.PNG)\n\n:::{.callout-note}\n# Update existierende Files\n\nWenn ihr nochmals Änderungen an den Files vornehmt, könnte ihr diese auf der Repository Seite über `Add File` hinzufügen. Achte darauf das die Files den gleichen Namen hat, damit wird sichergestellt, dass das auf GitHub existierende File überschrieben wird.\n\n![](figures/github_11.PNG)\n:::\n\n4. Ihr seht nun eure Files im Repository. Geht nun auf Einstellungen um unsere Webseite zu Publizieren. \n\n    ![](figures/github_5.PNG)\n\n    Geht auf Pages und setzt auf Branch die Einstellungen auf `main` und `/root` und klickt auf Save. Dies bewirkt, dass GitHub nun nach einem index.html in deinem main Branch sucht und aus diesem eine Webseite macht. \n\n    ![](figures/github_6.PNG)\n\n    Diesen Vorgang könnt ihr unter Actions finden. Sobald der orange Punkt zu einem grünen Häkchen wird, ist die Webseite fertig erstellt. \n\n    ![](figures/github_7.PNG)\n\n    Kehr nun zurück zu Pages in den Settings. Ihr sollten nun eine URL sehen, auf welcher eure Webseite läuft.\n\n    ![](figures/github_8.PNG) \n\n5. Zum Abschluss könnt ihr diese URL im About des Repositorys hinzufügen. Dies macht es euch einfacher auf die Webseite zuzugreifen, da ihr nicht immer den Link in den Settings suchen müsst, sondern direkt in eurem Repository angezeigt wird. \n\n    ![](figures/github_9.PNG)\n\n    Kopiere hierfür die URL und gehe auf den Code Tab und wählt dort das Rädchen neben dem About. Im Feld Webseite könnt ihr nun die URL reinkopieren. Speichert das mit \"Save Changes\". Nun sieht ihr unter dem About eure Webseite.\n\n    ![](figures/github_10.PNG)\n\n",
    "supporting": [
      "2_Uebung_Zeckenstiche_files"
    ],
    "filters": [],
    "includes": {}
  }
}
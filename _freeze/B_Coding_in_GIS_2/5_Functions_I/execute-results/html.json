{
  "hash": "e5bd3b6ca8d1c485f2ee6b1093ab2c3c",
  "result": {
    "markdown": "# Aufgabe 5: *Function* Basics {#sec-function-basics}\n\n## Theorie\n\nEin Grundprinzip von Programmieren ist \"DRY\" (*Don't repeat yourself*). Wenn unser Script viele ähnliche Codezeilen enthält ist das ein Zeichen dafür, dass man besser eine *Function* schreiben sollte. Das hat viele Vorteile: Unter anderem wird der Code lesbarer, einfacher zu warten und kürzer. \n\nUm mit Python gut zurechtzukommen ist das Schreiben von eigenen *Functions* unerlässlich. Dies ist auch nicht weiter schwierig: Eine *Function* wird mit `def` eingeleitet, braucht einen Namen, einen Input und einen Output.\n\nWenn wir zum Beispiel eine Function erstellen wollen die uns grüsst, so geht dies folgendermassen:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef sag_hallo():\n    return \"Hallo!\"\n```\n:::\n\n\n- Mit `def` sagen wir: \"Jetzt definiere ich eine Function\". \n- Danach kommt der Name der *Function*, in unserem Fall `sag_hallo` (mit diesem Namen können wir die *Function* später wieder aufrufen). \n- Als Drittes kommen die runden Klammern, wo wir bei Bedarf Inputvariablen (sogenannte Parameter) festlegen können. In diesem ersten Beispiel habe ich keine Parameter festgelegt.\n- Nach der Klammer kommt ein Doppelpunkt was bedeutet: \"jetzt wird gleich definiert, was die Funktion tun soll\".\n- Auf einer neuen Zeile wird eingerückt festgelegt, was die Function eben tun soll. Meist sind hier ein paar Zeilen Code vorhanden.\n- Die letzte eingerückte Zeile (in unserem Fall ist das die einzige Zeile) gibt mit `return` an, was die *Function* zurück geben soll (der Output). In unserem Fall soll sie \"Hallo!\" zurück geben.\n\nDas war’s schon! Jetzt können wir diese *Function* schon nutzen:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsag_hallo()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'Hallo!'\n```\n:::\n:::\n\n\nDiese *Function* ohne Input ist wenig nützlich. Meist wollen wir der *Function* etwas - einen Input - übergeben können. Beispielsweise könnten wir der *Function* unseren Vornamen übergeben, damit wir persönlich gegrüsst werden:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef sag_hallo(vorname):\n    return \"Hallo \" + vorname + \"!\" \n```\n:::\n\n\nNun können wir der Function ein Argument übergeben. In folgendem Beispiel ist `vorname` ein Parameter, \"Guido\" ist sein Argument.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsag_hallo(vorname = \"Guido\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Hallo Guido!'\n```\n:::\n:::\n\n\nWir können auch eine *Function* gestalten, die mehrere Parameter annimmt. Beispielweise könnte `sag_hallo()` zusätzlich noch einen Parameter `nachname` erwarten:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef sag_hallo(vorname, nachname):\n    return \"Hallo \" + vorname + \" \" + nachname + \"!\" \n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsag_hallo(vorname = \"Guido\", nachname = \"van Rossum\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'Hallo Guido van Rossum!'\n```\n:::\n:::\n\n\n## Übungen\n\nBevor du mit den Übungen anfägst, solltest du bereits eine eigene Conda Environment nach der Anleitung in Kapitel \"@sec-conda\" erstellt haben.\n\n\n<!-- % : Erste *Function* erstellen -->\n### Übung 5.1 {#sec-functions1-ex-gruezi}\n\nErstelle eine Function, die `gruezi` heisst, einen Nachnamen als Input annimmt und per Sie grüsst. \n\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Das Resultat soll in etwa folgendermassen aussehen:\ngruezi(nachname = \"van Rossum\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Guten Tag, van Rossum'\n```\n:::\n:::\n\n\n<!-- % : *Function* erweitern -->\n### Übung 5.2 {#sec-gruezi2}\n\nErstelle eine neue Funktion `gruezi2` welche im Vergleich zu `gruezi` einen weiteren Parameter namens `anrede` annimmt. \n\nDas Resultat soll in etwa folgendermassen aussehen:\n\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ngruezi2(nachname = \"van Rossum\", anrede = \"Herr\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'Guten Tag, Herr van Rossum'\n```\n:::\n:::\n\n\n<!-- % : Zahlen summieren -->\n### Übung 5.3\n\nErstelle eine Funktion `add` die zwei Zahlen summiert.\n\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Das Resultat sollte folgendermassen aussehen:\nadd(zahl1 = 2, zahl2 = 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n12\n```\n:::\n:::\n\n\n<!-- % : Quadratzahl -->\n### Übung 5.4\n\nErstelle eine Funktion `square`, welche den Input quadriert.\n\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Das Resultat sollte folgendermassen aussehen:\nsquare(zahl = 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n25\n```\n:::\n:::\n\n\n<!-- % : Meter in Fuss konvertieren -->\n### Übung 5.5\n\nErstelle eine Funktion `meter_zu_fuss`, die eine beliebige Zahl von Meter in Fuss konvertiert. Zur Errinnerung: 30.48 cm ergeben 1 Fuss. \n\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Das Resultat sollte folgendermassen aussehen:\n\nmeter_zu_fuss(meter = 1.80)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n5.905511811023622\n```\n:::\n:::\n\n\n",
    "supporting": [
      "5_Functions_I_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
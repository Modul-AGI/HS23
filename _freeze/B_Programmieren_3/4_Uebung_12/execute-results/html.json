{
  "hash": "acaa474582893652e1537cc29cbc0f86",
  "result": {
    "markdown": "---\noutput: false\necho: false                      # set to true to show solution\ncode-fold: false                 # set to true to show solution\ncode-summary: \"Musterlösung\"    \n---\n\n## Übung 12\n\n## Übung  12.1\n\nErstelle zwei Listen bestehend aus 3 Hundenamen (`hunde`) und 3 Katzennamen (`katzen`). Erstelle einen verschachtelten *For Loop*, wo jeder Hund jede Katze beisst und jede Katze jeden Hund kratzt.\n\n```python\nBruno beisst Greta und Greta kratzt  Bruno\nBerta beisst Greta und Greta kratzt  Berta\nHelmi beisst Greta und Greta kratzt  Helmi\n....\n```\n\n\n\n<!-- % Nested Loop: Multiplikation -->\n## Übung  12.2 \n\nErstelle einen verschachtelten Loop, wo alle Kombinationen von 0 bis 9 miteinander addiert werden.\n\n\n\n## Übung  12.3 (fakultativ, für Fortgeschrittene!)\n\nVersuche die Monte Carlo Simulation für die Annäherung an Pi (aus der ersten Übung \"Datenqualität und Unsicherheit) mit einer Funktion und einem For Loop zu lösen.\n\nZur Erinnerung, die Vorgehensweise für die Annäherung an Pi geht folgendermassen:\n\n1. Zufallskoordinaten (`x`, `y`) zwischen 0 und 1 erstellen\n2. Distanz zum Ursprung (0) mit der Formel $\\sqrt(x^2+y^2)$ berechnen\n3. Bestimmen ob sich der Punkt innerhalb des Kreisviertels befindet ($d < 1$)\n4. Schritte 1 & 2 mehrfach wiederholen\n5. Anteil der Punkte *innerhalb* des Kreisviertels mit 4 Multiplizieren\n\nTipps:\n\n- Für die Erstellung der Zufallspunkte brauchst du die Funktion `random()` aus dem modul `random`\n- Schritte 1 - 3 werden am sinnvollsten ein eine Funktion verpakt, welche keine Argumente benötigt\n- Schritt 4 löst du am besten mit einer `For loop` mit `range(100)` (für 100 Wiederholungen)\n\n\n\n",
    "supporting": [
      "4_Uebung_12_files"
    ],
    "filters": [],
    "includes": {}
  }
}


# Daten visualisieren {#sec-viz}

Es ist äusserst Zentral, Daten regelmässig und oft zu visualisieren. Die *de facto* standart Library hierfür in Python ist `matplotlib`. Diese Library kann man direkt ansteuern wie in [diesem Tutorial](https://matplotlib.org/stable/tutorials/introductory/usage.html) beschrieben wird. Wir verwenden die library jedoch etwas anders: Dabei nutzen wir die Tatsache aus, dass sowohl `pandas` wie auch `geopandas` eingebaute Methoden (*methods*) haben um deren Inhalte zu visualisieren. Die Methode heisst in beiden Fällen `.plot()`, wie wir weiter unten noch sehen werden.


## Histogramm aus `List`

`pandas` vereinfacht das Visualisieren von Daten sogar soweit, dass es sich jewils lohnt seine Listen, Dictionaries usw. zuerst in eine `Series` oder `DataFrame` zu überführen um sie zu visualisieren (wie ich zum Beispiel in @sec-random-numbers jeweils gemacht habe). 

```{python}
import random
import pandas as pd

random_gamma = [random.gammavariate(1, 1) for x in range(1000)]

random_gamma = pd.Series(random_gamma)

random_gamma.plot(kind = "hist", bins = 50)
```

Weitere Beispiele zu Histogrammen aus Listen findet ihr im Kapitel @sec-random-numbers .

## Boxplot aus `List`

Das Visualisieren als Boxplot ist sehr ähnlich, man ersetzt `"hist"` lediglich durch `"box`. Eine komplette liste der möglichen Argumente für findet ihr hier: <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html>

```{python}
random_gamma.plot(kind = "box")
```

## Scatterplot aus DataFrame

Um einen Scatterplot zu erstellen, braucht es eine `DataFrame` (eine `Series` reicht hierfür nicht aus).

```{python}
zeckenstiche = pd.read_csv("data/zeckenstiche.csv")
```

```{python}
zeckenstiche.plot("x", "y", kind = "scatter")
```

## Statische Karte aus GeoDataFrame

Um aus *GeoDataFrames* Karten zu machen verwendet man ebenfalls die `.plot()` Methode. Um wirklich schöne Karten mit Python herzustellen braucht man viel Übung. Für eine schnelle Visualisierung reicht aber die `.plot()` Methode.

```{python}
import geopandas as gpd

zeckenstiche = gpd.read_file("data/zeckenstiche.gpkg")
wald = gpd.read_file("data/wald.gpkg")
```

**Einfache Plots ohne anpassung:**

```{python}
wald.plot()
```

**Anpassung der Plot Grösse:**

```{python}
wald.plot(figsize = (5,5))
```

**Choroplethenkarte Karte**

```{python}
from matplotlib.colors import ListedColormap

my_cmap = ListedColormap(["green","lightgrey"])
wald.plot(column = "Wald_text", legend = True, cmap = my_cmap)
```

**Mehrere Layers:**

```{python}
base = wald.plot(column = "Wald_text", legend = True, cmap = my_cmap)
zeckenstiche.plot(color = "Red", ax = base)
```

## Interaktive Karten aus GeoDataFrame

Weitere Informationen dazu findet ihr hier: <https://geopandas.org/docs/user_guide/interactive_mapping.html>

Vollautomatisch, ohne Anpassungen:

```{python}
#| eval: false
zeckenstiche.explore()
```

Zeckenstiche Rot eingefärbt:

```{python}
#| eval: false
zeckenstiche.explore(color = "red")
```

Zeckenstiche nach `"accuracy"` eingefärbt:

```{python}
#| eval: false
zeckenstiche.explore(column = "accuracy")
```

Wald nach `"Wald_text"` eingefärbt (beachte, dass ich `my_cmap` weiter oben erstellt habe!):

```{python}
#| eval: false
wald.explore(column = "Wald_text", cmap = my_cmap)
```

Zwei übereinander gelagerte Layers:

```{python}
base = wald.explore(column = "Wald_text", cmap = my_cmap)
zeckenstiche.explore(m = base, color = "red")
```


{
  "hash": "27b66e2f68c031de893484ad84cf391e",
  "result": {
    "markdown": "# Aufgabe 10: *for loop* Einführung {#sec-forloops-1}\n\n## Theorie\n\n### Die Grundform\nNirgends ist der Aspekt der Automatisierung so sichtbar wie in *for loops*. Loops sind \"Schleifen\" wo eine Aufgabe beliebig lange wiederholt wird. Auch *for loops* sind im Grunde genommen simple. Auf den ersten Blick sieht eine *for loop* aus wie eine *Function* definition (siehe @sec-function-basics und @sec-function-advanced). Im folgenden Beispiel seht ihr ein minimales Beispiel einer *for loop*.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfor platzhalter in [0,1,2]:\n    print(\"Iteration\",platzhalter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIteration 0\nIteration 1\nIteration 2\n```\n:::\n:::\n\n\n- `for` legt fest, dass eine For-Loop beginnt\n- Nach `for` kommt eine Platzhalter-Variabel, die ihr beliebig benennen könnt. Im obigen Beispiel lautet diese `platzhalter`\n- Nach dem Platzhalter kommt der Begriff `in`. Dieser Begriff kommt zwingend nach dem Platzhalter.\n- Nach `in` wird der \"Iterator\" festgelegt, also worüber der For-Loop iterieren soll (hier: über eine `List` mit den Werten `[0,1,2]`). \n- Danach kommt ein Doppelpunkt `:` der zeigt: \"Nun legen wir gleich fest was im For-Loop passieren soll\" (ähnlich wie in einer *Function*)\n- Auf einer neuen Zeile wird eingerückt festgelegt, was in der *For-Loop* passieren soll. Dieser Teil kann beliebig lange sein, ein *for loop* ist dann fertig, wenn man nicht mehr eingerückt wird. In unserem Fall wird mit `print`[^print] etwas in die Konsole ausgegeben.\n- Achtung: `return()` gibt’s in For-Loops nicht!\n\n[^print]: Mit `print` können wir Variabeln in die Konsole \"ausdrucken\" lassen. Innerhalb von `print` können dazu verschiedene Variablen kommagetrennt aufgeführt werden, ohne sie mit `+` verbinden zu müssen wie damals in @sec-function-basics.\n\n### Der Iterator\n\nIm obigen Beispiel haben wir über eine *List* iteriert, wir haben also eine Liste als Iterator verwendet. Es gibt aber noch andere \"Dinge\", über die wir iterieren können. Angenommen wir wollen den gleichen *for loop* mit den Zahlen von 0 bis 100 oder 100 bis 1'000 durchführen. Es wäre ganz schön mühsam, alle Zahlen von 0 bis 100 manuell in einer Liste zu erfassen. Zu diesem Zweck können wir die Funktion `range` verwenden. Mit `range(3)` erstellen wir einen Iterator mit den Werten 0, 1 und 2. Mit `range(100,1001)` erhalten wir die Werte von 100 bis 1'000. \n\nDer gleiche *loop* wie oben lautet mit `range` folgendermassen:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfor platzhalter in range(3):\n    print(\"Iteration\",platzhalter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIteration 0\nIteration 1\nIteration 2\n```\n:::\n:::\n\n\n### Der Platzhalter\n\nDie Platzhaltervariabel liegt immer zwischen `for` und `in`, den Namen dieser Variabel könnt ihr frei wählen. Ich habe sie im obigen Beispiel `platzhalter` genannt. Speziell an dieser Variabel ist, dass sie während der Dauer des *Loops* ihren Wert verändert. Mehr dazu in @sec-forloops-2.\n\n## Übungen\n\n### Übung 10.1\n\nKopiere den ersten der beiden *Loops* und lasse ihn bei dir laufen. Spiele mit den Werten rum, um ein Gefühl für *For Loops* zu bekommen: Ergänze die Liste mit weiteren Zahlen, verändere den Namen der Platzhaltervariabel und verändere den Text, der in `print` ausgegeben wird.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\nIteration 0\nIteration 1\nIteration 2\nIteration 5\nIteration 10\nIteration 0\nIteration 1\nIteration 2\nIteration 5\nIteration 10\nwow 0 cool\nwow 1 cool\nwow 2 cool\nwow 5 cool\nwow 10 cool\n```\n:::\n:::\n\n\n<!-- % : Erste For-Loop erstellen -->\n### Übung 10.2 {#sec-for-gruss}\n\nKonstruiere eine Liste bestehend aus 3 Namen und nenne diese Liste `namen`. Erstelle danach einen *for loop*, mit welcher jede Person in der Liste gegrüsst wird. Nutze dafür `print`.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\nCiao  Il Buono\nCiao  Il Brutto\nCiao  Il Cattivo\n```\n:::\n:::\n\n\n```python\n# Der Output könnte etwa so aussehen\n\nCiao  Il Buono\nCiao  Il Brutto\nCiao  Il Cattivo\n```\n\n<!-- % : For-Loop mit `range()` -->\n### Übung 10.3\n\nKopiere den zweiten *For Loop* (der mit `range`) und spiele hier mit den Werten herum. Verändere den *For Loop* so, dass er über die Werte von -5 bis +5 iteriert.\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=5}\n\n::: {.cell-output .cell-output-stdout}\n```\nIteration -5\nIteration -4\nIteration -3\nIteration -2\nIteration -1\nIteration 0\nIteration 1\nIteration 2\nIteration 3\nIteration 4\nIteration 5\n```\n:::\n:::\n\n\n<!-- % : *for loop* mit Quadieren -->\n### Übung 10.4\n\nBis jetzt haben unsere *Loops* nicht viel Arbeiten müssen. Erstelle nun einen *For Loop*, welcher für die Werte -5 bis +5 folgendes ausgibt:\n\n```python\nDas Quadrat von -5 ist 25\nDas Quadrat von -4 ist 16\n...\n```\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\nDas Quadrat von -5 ist 25\nDas Quadrat von -4 ist 16\nDas Quadrat von -3 ist 9\nDas Quadrat von -2 ist 4\nDas Quadrat von -1 ist 1\nDas Quadrat von 0 ist 0\nDas Quadrat von 1 ist 1\nDas Quadrat von 2 ist 4\nDas Quadrat von 3 ist 9\nDas Quadrat von 4 ist 16\nDas Quadrat von 5 ist 25\n```\n:::\n:::\n\n\n<!-- % : *for loop* ohne Platzhaltervariabel -->\n### Übung 10.5 {#sec-forloops-ex-party}\n\nBisher haben wir die Platzhaltervariabel immer in unserem *Loop* wiederverwendet. Das müssen wir aber gar nicht, wir können den *for loop* einfach nutzen um etwas x mal zu wiederholen. Erstellen einen *for loop* der folgende beiden Sätze 5x wiederholt:\n\n```\nWho likes to party?\nWe like to party!\nWho likes to party?\n....\n```\n\n:::{.callout-note collapse=\"true\"}\n\nNutze dafür zwei verschiedene `print` Befehle auf zwei Zeilen.\n:::\n\n::: {.cell tags='[\"hide-cell\"]' execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\nWho likes to party?\nWe like to party!\nWho likes to party?\nWe like to party!\nWho likes to party?\nWe like to party!\nWho likes to party?\nWe like to party!\nWho likes to party?\nWe like to party!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "2_For_Loops_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
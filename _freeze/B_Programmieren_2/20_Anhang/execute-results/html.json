{
  "hash": "5a123c47405febec8b4ff7d72ab2222d",
  "result": {
    "markdown": "# Anhang\n\n## Anhang 1: Probleme mit Conda: Umlaute im Bentzernamen\n\nAlle *conda environments* werden an einem zentralen Ort gespeichert. Typischerweise im folgenden Verzeichnis: `C:\\Users\\DEIN-WINDOWS-BENUTZERNAME\\AppData\\Local\\ESRI\\conda\\envs\\`. Wenn ihr Umlaute in eurem Windows Benutzernamen habt, findet `conda` eure *environment* möglicherweise nicht. Eine Möglichkeit, dieses Problem zu beheben, ist einen alternativen Speicherort für eure *conda environments* zu definieren. Dazu geht ihr wie folgt vor[^envsdirs]:\n\n1. Überlege dir eine Location, wo du deine conda nvironments abspeichern möchtest (z.B. `C:\\conda-envs`). Erstelle diesen Ordnerpfad und prüfe ob du dort Schreibrechte hast indem du in diesem Orner `C:\\conda-envs` eine Dateie erstellst. Wenn das klappt, hast du Schreibrechte.\n2. Füge diesen Pfad deiner conda configuration hinzu:\n\n    ```cmd\n    conda config --append envs_dirs C:\\conda-envs\n    ```\n        \n3. Prüfe ob der letzte Schritt funktioniert hat indem du folgendem Befehl laufen lässt und prüfst, ob `C:\\conda-envs` vorkommt:\n\n    ```cmd\n    conda config --show envs_dirs\n    ```\n\n4. Erstelle eine neue conda environment in dieser neu erstellten directory:\n\n    ```cmd   \n    conda create --prefix=C:\\conda-envs\\geopython\n    ```\n\n5. Prüfe, ob das geklappt hat, indem du die verfügbaren environments auflistest.\n\n    ```cmd\n    conda info --envs\n    ```\n\n6. Wenn das geklappt hat, kannst du nun deine environment aktivieren\n\n    ```cmd\n    conda activate geopython\n    ```\n\n\n[^envsdirs]: Aus: <https://stackoverflow.com/a/67376348/4139249>\n\n\n\n## Anhang 2: Conda und `arcpy`\n\nUm die ganzen Befehle von ArcGIS direkt in Python ansteuern zu können, muss das package arcpy installiert werden. Bisher haben wir alle unsere Packages mit conda installiert, z.B:\n\n```cmd\nconda install -c conda-forge geopandas\n```\n\nMit `arcpy` geht dies leider nicht, weil `arcpy` ein kostenpflichtiges Modul ist welches eine ArcGIS Lizenz benötigt. Glücklicherweise nutzt ArcGIS aber auch Conda Environments. Wir müssen also nur bewerkstelligen, das Juypter Lab die gleiche Conda environment verwendet wie ArcGIS. Dazu gehen wir wie folgt vor:\n\n- Schritt 1: ArcGIS Python Umgebung Klonen\n- Schritt 2: Die neue Environment aktivieren\n- Schritt 3: weitere Module installieren\n\n\n### Schritt 1: ArcGIS Python Umgebung Klonen\n\nZuerst prüfen wir die Python Umgebung in ArcGIS. Diese findet man in ArcGIS unter Project > Python\n\n![](figures/arcgis-conda-zoom.png)\n\nHier ist einerseits die Project Environement ersichtlich (1), andererseits steht aber auch, dass diese Environment \"read only\" ist (2). Das bedeutet, dass wir keine neuen module installieren können, wenn wir diese Environment benutzen. Wir folgen deshalb den Vorschlag \"Clone and activate a new environment\". Dazu klicken wir auf \"Manage Environment\" (3). Übrigens: Das ArcGIS Conda benutzt sehen wir an (4).\n\n\nKlicke hier auf \"Clone Default\" um die Umgebung zu kopieren. Das dauert eine Weile, danach kann man die neue Environment auswählen (Klick auf den Button \"Active\"). Notiert dir den Namen der neuen Environment, speichere das ArcGIS Projekt ab und starte das ArcGIS neu\n\n### Schritt 2: Die neue Environment aktivieren\n\nNun haben wir uns eine wunderschöne Python Umgebung parat gemacht und können diese jetzt in CMD aktivieren. Starte dazu Command Prompt / CMD und schaue dir die verfügbaren environments an:\n\n```default\nconda env list\n```\n\nBei mir sieht der output folgendermassen aus:\n\n\n```default\n# conda environments:\n#\narcgisonline             C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\arcgisonline\narcgisonline2            C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\arcgisonline2\narcgispro-py3-clone      C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\arcgispro-py3-clone\narcgispro-py3-clone1     C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\arcgispro-py3-clone1\ncameratraps-detector     C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\cameratraps-detector\ngeopython                  C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\geopython\ntest                     C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\test\narcgispro-py3         *  C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-py3\nroot                     C:\\Program Files\\ArcGIS\\Pro\\bin\\Python\n```\n\nAktiviere nun die eben erstelle environment mit folgendem code (ersetzte `name-der-environment` mit dem tatsächlichen Namen deiner neuen environment aus dem letzten Schritt. \n\n```cmd\nactivate name-der-environment\n```\n\n### Schritt 3: weitere Module installieren\n\nGlücklicherweise ist `jupyterlab` bereits in der `arcgis` environment installiert, dies können wir mit folgendem code überprüfen:\n\n```cmd\nconda list\n\n```\n\n```default\n# packages in environment at C:\\Users\\rata\\AppData\\Local\\ESRI\\conda\\envs\\arcgispro-py3-clone1:\n#\naffine                    2.3.0                      py_0    anaconda\narcgis                    1.8.2                 py36_1275    esri\narcgispro                 2.6                           0    esri\n.\n.\n.\njupyterlab                2.2.9                      py_0    conda-forge\njupyterlab_pygments       0.1.2              pyh9f0ad1d_0    conda-forge\njupyterlab_server         1.2.0                      py_0    conda-forge\n.\n.\n.\n\n```\n\nWenn jetzt aber noch module fehlen (wie z.B. `geopandas`), dann können wir diese wie gewohnt installieren.\n\n\n\n### Schritt 4: `arcpy` verwenden\n\nWenn alles gewünschten Module installiert sind können wir nun JupyterLab starten.\n\nSobald JupyterLab gestartet ist, können wir innerhalb einer cell das Modul `arcpy` mit `import arcpy` importieren und nun auch verwenden. Zum Beispiel folgendermassen:\n\n```python\nimport arcpy\nfrom arcpy import env\n\n# Set environment settings\nenv.workspace = \"C:/data/Habitat_Analysis.gdb\"\n\n# Select suitable vegetation patches from all vegetation\nveg = \"vegtype\"\nsuitableVeg = \"C:/output/Output.gdb/suitable_vegetation\"\nwhereClause = \"HABITAT = 1\" \narcpy.Select_analysis(veg, suitableVeg, whereClause)\n```\n\nDer Syntax ist auf jeder jeweiligen Tool Beschreibung gut dokumentiert (Abschnitt \"Code Sample\", z.B. [hier](https://pro.arcgis.com/en/pro-app/tool-reference/analysis/buffer.htm))\n\n\n\n## Anhang 3: JupyterLab mit `R`\n\nEinige von euch kennen JupyterLab bereits aus dem Statistik Unterricht. Dort habt ihr JupyterLab mit `R` benutzt, dabei habt ihr aber nicht auf eurem lokalen PC, sondern auf einer *gehosteten* Version von JupyterLab gearbeitet, also auf einem Server. Dieser Server kann jeder Zeit wieder Offline geschaltet werden oder ihr könnt euren Zugriff darauf verlieren. Wenn ihr JupyterLab mit `R` lokal nutzen wollt, geht ihr wie folgt vor (Anleitung in Anlehnung an [diesen Blogpost](https://richpauloo.github.io/2018-05-16-Installing-the-R-kernel-in-Jupyter-Lab/)):\n\n1. In eurem Python Command Prompt erstellt ihr eine neue `conda` environment, aktiviert diese und installiert `juypterlab` sowie `r-ikernel` (letzteres aus dem channel `r`, nicht wie gewohnt `conda-forge`).\n\n    ```bash\n    conda create --name r-env\n    conda activate r-env\n    conda install -c conda-forge jupyterlab\n    conda install -c r r-irkernel\n    ```\n\n2. Nun ist `R` in eurer conda environment aktiviert. Nun könnt ihr mit folgenden Befehlen das Package `IRkernel` installieren sowie den Kernel für JuypterLab verfügbar machen.\n\n    ```bash\n    Rscript -e \"install.packages('IRkernel', repos = 'https://cloud.r-project.org')\"\n    Rscript -e \"IRkernel::installspec(user = FALSE)\"\n    ```\n\n3. Optional: Wenn ihr ein paar nützliche shortcuts für `R` haben wollt, könnt ihr die extension `techrah/text-shortcuts` mit folgender Zeile installieren.\n\n    ```bash\n    jupyter labextension install @techrah/text-shortcuts\n    ```\n\n4. Nun könnt ihr JupyterLab starten und sollet nun einen *R-Kernel* zur Verfügung haben:\n\n    ```bash\n    jupyter lab\n    ```\n\n![Nach den oben beschriebnen Schritten sollte nun ein `R` Kernel zur Verfügung stehen](figures/ir-kernel.png){#fig-irkernel}\n\n\n\n## Anhang 4: Geodaten visualisieren\n\nIn folgenden Beispielen zeigen wir noch ein paar einfache Wege, wie ihr die Zeckenstichdaten visualisieren könnt.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport descartes\n\nzeckenstiche_full = pd.read_csv(\"data/zeckenstiche_full.csv\")\n\nwald = gpd.read_file(\"data/wald.gpkg\")\nzeckenstiche_gpd = gpd.GeoDataFrame(zeckenstiche_full,\n                                         geometry=gpd.points_from_xy(zeckenstiche_full['x'], zeckenstiche_full['y']),\n                                         crs = 2056) \n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'geopandas'\n```\n:::\n:::\n\n\n### Kernel Density Plot\n\nMit der Erweiterung `seaborn` lassen sich mit wenigen Zeilen Code eine *Kernel Density* rechnen und visualisieren. Siehe nachstehenden Code:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport seaborn as sns\n\nf, ax = plt.subplots(1, figsize=(12, 12))\nwald.boundary.plot(linewidth=0.1, ax=ax)\nzeckenstiche_gpd.plot(color='red', linewidth=0.1, ax=ax)\n\nsns.kdeplot(x = zeckenstiche_full.x, y= zeckenstiche_full.y,shade = False,n_levels = 10, cmap = \"viridis\", ax = ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'seaborn'\n```\n:::\n:::\n\n\n### Hintergrundkarte\n\nMit der Erweiterung `contextily` kann man sehr schnell und einfach Hintergrundkarten in den Plot einbinden. Dafür muss das *GeoDataFrame* vorher aber in WGS84 Koordinaten (EPSG 3857) konvertiert werden (mit `to_crs`, s.u.).\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport contextily as ctx\n\nf, ax = plt.subplots(1, figsize=(12, 12))\nzeckenstiche_gpd.to_crs(epsg = 3857).plot(ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nModuleNotFoundError: No module named 'contextily'\n```\n:::\n:::\n\n\n### KDE mit Hintergrundkarte\n\nKernel Denisty und Hintergrundkarte können auch kombiniert werden:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nlat = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.x\nlng = zeckenstiche_gpd.to_crs(epsg = 3857).geometry.y\n\nf, ax = plt.subplots(1, figsize=(12, 12))\n\nsns.kdeplot(x = lat,y = lng,shade = False,n_levels = 25, cmap = \"viridis\", ax = ax)\nctx.add_basemap(ax)\n\nax.set_axis_off()\nplt.show()\n```\n\n::: {.cell-output .cell-output-error}\n```\nNameError: name 'zeckenstiche_gpd' is not defined\n```\n:::\n:::\n\n\n",
    "supporting": [
      "20_Anhang_files"
    ],
    "filters": [],
    "includes": {}
  }
}
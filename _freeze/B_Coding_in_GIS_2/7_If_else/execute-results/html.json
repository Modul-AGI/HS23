{
  "hash": "bf15f6244b6e90782b5a338a41577154",
  "result": {
    "markdown": "# Aufgabe 7: If / Else\n\nEin wichtiger Bestandteil von Programmieren sind Fallunterscheidungen. Mit Fallunterscheidungen können wir mit unterschiedlichen Situationen verschieden umgehen.\n\nDie einfache Fallunterscheidung ist die bedingte Verzweigung. Die Syntax der einfachen `if`-Anweisung lautet folgendermassen:\n\n```python \nif Bedingung:\n    # Anweisungen 1\nelse:\n    # Anweisungen 2\n```\n\nZum Beispiel:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# hier alter eingeben:\nalter = 35\n\nif alter < 40:\n    print(\"Backstreet Boys: 'I want it that way'\")\nelse:\n    print(\"The Jackson 5: 'I want you back'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBackstreet Boys: 'I want it that way'\n```\n:::\n:::\n\n\nWenn wir mehr als zwei verschiedene Fälle haben, können diese mit `elif` dazwischen geschaltet werden. \n\n\n```python\nif Bedingung1:\n    # Anweisungen 1\nelif Bedingung2:\n    # Anweisungen 2\nelif Bedingung3:\n    # Anweisungen 3\nelse:\n    # Anweisungen 4\n```\n\nZum Beispiel:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# hier alter eingeben:\nalter = 35\n\nif alter < 20:\n    print(\"Kesha: 'Tik Tok'\")\nelif alter < 30:\n    print(\"Destiny's Child: 'Say My Name'\")\nelif alter < 40:\n    print(\"Mariah Carey: 'Vision of love'\")\nelse:\n    print(\"Blondie: 'Call me'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMariah Carey: 'Vision of love'\n```\n:::\n:::\n\n\nSolche Fallunterscheidungen sind vor allem in Funktionen sehr praktisch. Aus dem obigen Beispiel können wir beispielsweise eine Funktion erstellen, die uns ein Lied in Abhängigkeit zu unserem Alter vorschlägt:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef suggest_song(alter):\n    if alter < 20:\n        song = \"Kesha: 'Tik Tok'\"\n    elif alter < 30:\n        song = \"Destiny's Child: 'Say My Name'\"\n    elif alter < 40:\n        song = \"Mariah Carey: 'Vision of love'\"\n    else:\n        song = \"Blondie: 'Call me'\"\n    return \"I suggest the song \" + song + \". Enjoy!\"\n\n\nsuggest_song(24)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n\"I suggest the song Destiny's Child: 'Say My Name'. Enjoy!\"\n```\n:::\n:::\n\n\nDabei ist wichtig, dass man sich jeweils die Ausführungslogik vor Augen führt.\n\n\n```{mermaid}\ngraph LR\n    A[alter < 20] \n    A-->|yes| B[Kesha: 'Tik Tok']\n    A-->|no| C[Alter < 30]\n    C-->|yes| D[Destiny's Child: 'Say My Name']\n    C-->|no| E[alter < 40]\n    E-->|yes| F[Mariah Carey: 'Vision of love']\n    E-->|no| G[Blondie: 'Call me']\n```\n\n\n### Übung 7.1 {#sec-ex-ifelse-gruezi2}\n\nErstelle eine neue Funktion `gruezi3` die `gruezi` (aus @sec-functions1-ex-gruezi) um einem weiteren Parameter `uhrzeit` erweitert. Die Funktion soll vor 18 Uhr (`uhrzeit < 18`) mit \"Guten Tag\" und sonst mit \"Guten Abend\" grüssen. Um es einfach zu halten: Die Zeitangbe muss in Dezimalzahlen erfolgen (also nicht `20:15 Uhr` sondern `20.25).\n\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# die Lösung sollte etwa folgendermasssen funktionieren:\n\ngruezi3(\"Guido\", uhrzeit = 21)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'Guten Abend Guido'\n```\n:::\n:::\n\n\n### Übung 7.2\n\nErweitere die Funktion `gruezi2` so, dass zwischen folgende Uhrzeiten berücksichtigt werden:\n\n| Uhrzeit  | Begrüssungsform | \n|:---|:---|:---|\n| 5 bis 11 Uhr  | Guten Morgen |\n| 11 bis 18 Uhr  | Guten Tag |\n| 18 bis 22 Uhr  | Guten Abend |\n| 22 bis 5 Uhr  | Gute Nacht |\n\n: Uhrzeiten und ihre Begrüssungsformen {#tbl-begruesung}\n\nDas Problem ist etwas schwierig zu Packen weil wir die \"von - bis\" Uhrzeiten in eine Ja/Nein Logik überführen müssen. Überlege dir zuerst eine Ausführungslogik und schreibe danach die `if`, `elif`und `else` Operationen. Im Dropdown unten ist unser Vorschlag.\n\n:::{.callout-note collapse=\"true\"}\n\n\n```{mermaid}\ngraph LR\n    A[uhrzeit < 5] \n    A-->|yes| B[Gute Nacht]\n    A-->|no| C[Uhrzeit < 11]\n    C-->|yes| D[Guten Morgen]\n    C-->|no| E[Uhrzeit < 18]\n    E-->|yes| F[Guten Tag]\n    E-->|no| G[Uhrzeit < 22]\n    G-->|yes| H[Guten Abend]\n    G-->|no| I[Gute Nacht]\n```\n\n:::\n\n\n\nTeste die Funktion mit verschiedenen Optionen um sicherzustellen, dass sie richtig funktioniert.\n\n### Übung 7.2\n\nErweitere die Funktion `bmi` aus @sec-ex-functions-bmi so, dass statt dem berechneten BMI der \"Nutritional status\" aufgrund der [WHO Klassifizierung](https://www.euro.who.int/en/health-topics/disease-prevention/nutrition/a-healthy-lifestyle/body-mass-index-bmi) ausgegeben wird:\n\n\n\n\n| BMI  | Nutritional status | \n|:---|:---|\n| Below 18.5  | Underweight |\n| 18.5–24.9  | Normal weight |\n| 25.0–29.9  | Pre-obesity |\n| 30.0–34.9  | Obesity class I |\n| 35.0–39.9  | Obesity class II |\n| Above 40  | Obesity class III |\n\n: WHO Nutritional status {#tbl-who-bmi}\n\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Der Output sollte etwa folgedermassen aussehen\nbmi2(1.7, 70)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'Who classification: Normal weight'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "7_If_else_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
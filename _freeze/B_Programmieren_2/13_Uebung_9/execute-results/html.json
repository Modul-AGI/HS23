{
  "hash": "02a26569a11041b047f11adfc54bdce2",
  "result": {
    "markdown": "---\noutput: false\necho: true                      # set \"to true\" to show solutions\ncode-fold: true                 # set \"to true\" to show solutions\ncode-summary: \"Musterlösung\"     \n---\n\n# Übung 9\n\nFür diese Übung brauchen wir\n\n1. Die Python-Module `pandas` sowie `random`\n2. Die Funktion `offset_coordinate` aus @sec-ex-offset-function\n3. *zeckenstiche.csv* importiert als `pandas DataFrame` in der Variabel `zeckenstiche`\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"false\"}\nimport pandas as pd\nimport random\n\ndef offset_coordinate(old, distance = 100):\n    new = old + random.normalvariate(0, distance)\n    return new\n\nzeckenstiche = pd.read_csv(\"data/zeckenstiche.csv\")\n```\n:::\n\n\n## Übung 9.1\n\nMache dich nochmals damit vertraut, einzelne Spalten zu selektieren. Schau dir @sec-dataframes nochmals an wenn du nicht mehr weisst wie das geht.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nzeckenstiche[\"x\"]\nzeckenstiche[\"y\"]\n```\n:::\n\n\n<!-- % Neue Spalten erstellen -->\n## Übung 9.2\n\nMache dich nochmals damit vertraut, wie man neue Spalten erstellt. Schau dir @sec-dataframes nochmals an wenn du nicht mehr weisst wie das geht. Erstelle ein paar neue Spalten nach dem Beispiel unten um die Hangriffe zu üben. Lösche die Spalten im Anschluss wieder mit `del zeckenstiche['test1']` etc.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nzeckenstiche[\"test1\"] = \"test1\"\n\nzeckenstiche[\"test2\"] = 10\n\nzeckenstiche[\"test3\"] = range(10)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-fold=\"false\"}\n# zeckenstiche könnte danach folgendermassen aussehen:\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n      <th>test1</th>\n      <th>test2</th>\n      <th>test3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n      <td>test1</td>\n      <td>10</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-fold=\"false\"}\n# unnötigen Spalten wieder entfernen:\ndel zeckenstiche['test1']\ndel zeckenstiche['test2']\ndel zeckenstiche['test3']\n```\n:::\n\n\n## Übung 9.3 {#sec-ex-apply}\n\n`pandas` kennt eine ganze Familie von Methoden, um Spalten zu Manipulieren und Daten zu Aggregieren (`apply`, `map`, `mapapply`, `assign`). Es würde den Rahmen dieses Kurses sprengen, die alle im Detail durchzugehen, es lohnt sich aber sehr sich mit diesen auseinanderzusetzen wenn man sich näher mit Python befassen möchte.\n\nIm unserem Fall brauchen wir lediglich die Methode `apply` um die Funktion `offset_coordinate()` auf die Zeckenstichkoordinaten anzuwenden. Dabei gehen wir wie folgt for:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"false\"}\nzeckenstiche[\"x\"].apply(offset_coordinate)\n#\\______1_______/ \\_2_/\\_______3_________/\n\n# 1. Spalte selektieren ([\"x\"])\n# 2. Methode \"apply\" aufrufen\n# 3. Function übergeben\n```\n:::\n\n\nVerwende dieses Schema um auch `offset_coordinate` auf die `y` Spalte anzuwenden und speichere den Output dieser beiden Operationen als neue Spalten `x_sim` sowie `y_sim`. Die *DataFrame* `zeckenstiche` sollte danach wie folgt aussehen:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nzeckenstiche[\"x_sim\"] = zeckenstiche[\"x\"].apply(offset_coordinate)\nzeckenstiche[\"y_sim\"] = zeckenstiche[\"y\"].apply(offset_coordinate)\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code code-fold=\"false\"}\nzeckenstiche\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>accuracy</th>\n      <th>x</th>\n      <th>y</th>\n      <th>x_sim</th>\n      <th>y_sim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2550</td>\n      <td>439.128951</td>\n      <td>2681116</td>\n      <td>1250648</td>\n      <td>2.680966e+06</td>\n      <td>1.250693e+06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10437</td>\n      <td>301.748542</td>\n      <td>2681092</td>\n      <td>1250672</td>\n      <td>2.681207e+06</td>\n      <td>1.250677e+06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9174</td>\n      <td>301.748542</td>\n      <td>2681128</td>\n      <td>1250683</td>\n      <td>2.680951e+06</td>\n      <td>1.250774e+06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8773</td>\n      <td>301.748542</td>\n      <td>2681111</td>\n      <td>1250683</td>\n      <td>2.681051e+06</td>\n      <td>1.250554e+06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2764</td>\n      <td>301.748529</td>\n      <td>2681131</td>\n      <td>1250692</td>\n      <td>2.681130e+06</td>\n      <td>1.250787e+06</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2513</td>\n      <td>301.748529</td>\n      <td>2681171</td>\n      <td>1250711</td>\n      <td>2.681163e+06</td>\n      <td>1.250879e+06</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9185</td>\n      <td>301.748542</td>\n      <td>2681107</td>\n      <td>1250712</td>\n      <td>2.681018e+06</td>\n      <td>1.250644e+06</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>28521</td>\n      <td>301.748542</td>\n      <td>2681124</td>\n      <td>1250720</td>\n      <td>2.681127e+06</td>\n      <td>1.250585e+06</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>26745</td>\n      <td>301.748542</td>\n      <td>2681117</td>\n      <td>1250725</td>\n      <td>2.681289e+06</td>\n      <td>1.250530e+06</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>27391</td>\n      <td>301.748542</td>\n      <td>2681138</td>\n      <td>1250725</td>\n      <td>2.681184e+06</td>\n      <td>1.250744e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Übung 9.4 {#sec-ex-param}\n\nIn @sec-ex-apply haben wir unsere Funktion `offset_coordinate` aufgerufen, ohne den Parameter `distance` zu spezifizieren. Dies war möglich, weil wir für `distance` einen Defaultwert festgelegt hatten (100 Meter). Wir können aber auch zusätzliche Parameter kommagetrennt nach der Funktion angeben. Dies sieht folgendermassen aus:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-fold=\"false\"}\nzeckenstiche[\"x\"].apply(offset_coordinate, distance = 200)\n```\n:::\n\n\nNutze diese Möglichkeit, um den Offset (`distance`) auf maximal 10 Meter zu reduzieren.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nzeckenstiche[\"x_sim\"] = zeckenstiche[\"x\"].apply(offset_coordinate, distance = 10)\nzeckenstiche[\"y_sim\"] = zeckenstiche[\"y\"].apply(offset_coordinate, distance = 10)\n```\n:::\n\n\n## Übung 9.5\n\nUm die Original `x`/`y`-Werte sowie die simulierten Daten im gleichen Plot darzustellen, wird folgendermassen vorgegangen: Der erste Datensatz wird mit `.plot()` visualisiert, wobei der Output einer Variabel  (z.B. `basemap`)  zugewiesen wird. Danach wird der zweite Datensatz ebenfalls mit `.plot()` visualisiert, wobei auf den ersten Plot via dem Argument `ax` verwiesen wird.\n\nBei den roten Punkten handelt es sich um die Original-Zeckenstichen, bei den blauen um die simulierten (leicht verschoben) Zeckenstiche. Visualisiere deine eigenen Zeckenstiche auf diese Weise.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code code-fold=\"false\"}\nfrom matplotlib import pyplot as plt\n\nbasemap = zeckenstiche.plot(\"x\", \"y\", kind = \"scatter\", color = \"red\")\nzeckenstiche.plot(\"x_sim\", \"y_sim\", kind = \"scatter\", ax = basemap, color = \"blue\")\n\nplt.axis(\"equal\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(2681087.939438455, 2681177.271792452, 1250623.649886115, 1250747.7783412293)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](13_Uebung_9_files/figure-html/cell-12-output-2.png){width=606 height=443}\n:::\n:::\n\n\n",
    "supporting": [
      "13_Uebung_9_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}